#!/usr/bin/env bash
set -e

SCRIPTS_DIR="$(readlink -f "$(dirname "$0")")/.."

# shellcheck source=build/scripts/common.sh
. "${SCRIPTS_DIR}"/common.sh
parse_env_args

check_tool gomplate

cd "${BUILDDIR}"

# Copy the base upstream config, modifications and then expand
cat "${SCRIPTS_DIR}/../config/${DEVICE}/config.orig" >.config
if [[ ! "${REPRODUCE_UPSTREAM_BUILD}" == "true" ]]; then
	if [ -f "${DEVICE_CONFIG_FILE}" ]; then
		echoerr "Applying ${DEVICE_CONFIG_FILE}" on top of original .config
		cat "${DEVICE_CONFIG_FILE}" >>.config
	fi
else
	echoerr "Skipping custom .config because of REPRODUCE_UPSTREAM_BUILD=true"
fi

"${SCRIPTS_DIR}/core/run" make defconfig

rm -rf "${BUILDDIR}/files"
if [[ ! "${REPRODUCE_UPSTREAM_BUILD}" == "true" ]]; then
	# Remove the custom files present and copy from config dir
	if [ -d "${SCRIPTS_DIR}/../config/${DEVICE}/files" ]; then
		echoerr "Copying custom files from ${SCRIPTS_DIR}/../config/${DEVICE}/files"
		cp -r "${SCRIPTS_DIR}/../config/${DEVICE}/files" "${BUILDDIR}/files"

		# Replace all the _TEMPLATE variables in files with values from env
		# All such values should come from ${DEVICE_TEMPLATE_ENV_FILE} file
		if [ -n "${DEVICE_TEMPLATE_ENV_FILE:-}" ]; then
			echoerr "Applying template-variables templating on top of ${BUILDDIR}/files"

			find "${BUILDDIR}/files" -type f | sort | while read -r file; do
				echoerr "Templating ${file}"
				TMPFILE="$(mktemp)"
				env -i bash -c ". ${DEVICE_TEMPLATE_ENV_FILE} && cat ${file} | gomplate" >"${TMPFILE}"
				mv "${TMPFILE}" "${file}"
			done
		fi
	fi
else
	echoerr "Skipping copying custom files because of REPRODUCE_UPSTREAM_BUILD=true"
fi
