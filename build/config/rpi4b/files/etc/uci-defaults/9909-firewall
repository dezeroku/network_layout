set -ex

uci set firewall.@defaults[0].synflood_protect='1'
uci commit firewall

# This is for WAN
# Make it a bit more hidden for the outside world
uci set firewall.@zone[1].input='DROP'
uci set firewall.@rule[1].target='REJECT'
uci commit firewall

uci set firewall.guest_zone=zone
uci set firewall.guest_zone.name='guest'
uci set firewall.guest_zone.output='ACCEPT'
uci set firewall.guest_zone.forward='REJECT'
uci set firewall.guest_zone.input='REJECT'
uci set firewall.guest_zone.network='guest'
uci commit firewall

uci set firewall.guest_to_wan_forwarding=forwarding
uci set firewall.guest_to_wan_forwarding.src='guest'
uci set firewall.guest_to_wan_forwarding.dest='wan'
uci commit firewall

uci set firewall.iot=zone
uci set firewall.iot.name='iot'
uci set firewall.iot.output='ACCEPT'
uci set firewall.iot.forward='REJECT'
uci set firewall.iot.input='REJECT'
uci set firewall.iot.network='iot'
uci commit firewall

# TODO: make this proper
# Probably we only want the WAN here?
# In-network communication should be handled out-of-the-box
uci set firewall.vpn=zone
uci set firewall.vpn.name='${WIREGUARD_INTERFACE_TEMPLATE}'
uci set firewall.vpn.input='ACCEPT'
uci set firewall.vpn.output='ACCEPT'
uci set firewall.vpn.forward='ACCEPT'
uci set firewall.vpn.network='${WIREGUARD_INTERFACE_TEMPLATE}'
uci commit firewall

uci set firewall.vpn_to_wan_forwarding=forwarding
uci set firewall.vpn_to_wan_forwarding.src='${WIREGUARD_INTERFACE_TEMPLATE}'
uci set firewall.vpn_to_wan_forwarding.dest='wan'
uci commit firewall

# Does this actually do anything?
# Or is it enough to rely on the https-dns-proxy to do this?
uci set firewall.vpn_dns_redirect=redirect
uci set firewall.vpn_dns_redirect.dest='lan'
uci set firewall.vpn_dns_redirect.target='DNAT'
uci set firewall.vpn_dns_redirect.name='Redirect VPN DNS'
uci set firewall.vpn_dns_redirect.src='${WIREGUARD_INTERFACE_TEMPLATE}'
uci set firewall.vpn_dns_redirect.src_dport='53'
uci set firewall.vpn_dns_redirect.dest_ip='${LAN_IPADDR_TEMPLATE}'
uci set firewall.vpn_dns_redirect.dest_port='53'
uci commit firewall

# Is this needed?
# It's disabled anyway
#uci set firewall.@rule[9]=rule
#uci set firewall.@rule[9].name='Support-UDP-Traceroute'
#uci set firewall.@rule[9].src='wan'
#uci set firewall.@rule[9].dest_port='33434:33689'
#uci set firewall.@rule[9].proto='udp'
#uci set firewall.@rule[9].family='ipv4'
#uci set firewall.@rule[9].target='REJECT'
#uci set firewall.@rule[9].enabled='0'
#uci commit firewall

uci set firewall.allow_wan_vpn=rule
uci set firewall.allow_wan_vpn.name='Allow-Wireguard-VPN-From-WAN'
uci set firewall.allow_wan_vpn.proto='udp'
uci set firewall.allow_wan_vpn.src='wan'
uci set firewall.allow_wan_vpn.dest_port='${VPN_LISTEN_PORT_TEMPLATE}'
uci set firewall.allow_wan_vpn.target='ACCEPT'
uci commit firewall

uci set firewall.allow_lan_guest_router_access=rule
uci set firewall.allow_lan_guest_router_access.name='Allow-Guest-Router-Access-From-LAN'
uci set firewall.allow_lan_guest_router_access.src='lan'
uci set firewall.allow_lan_guest_router_access.dest_ip='${GUEST_ROUTER_IP_TEMPLATE}'
uci set firewall.allow_lan_guest_router_access.target='ACCEPT'
uci set firewall.allow_lan_guest_router_access.dest='guest'
uci commit firewall

# MDNS broadcast for lan
uci set firewall.allow_mdns_lan_broadcast=rule
uci set firewall.allow_mdns_lan_broadcast.name='Allow-mDNS-lan-broadcast'
uci set firewall.allow_mdns_lan_broadcast.proto='udp'
uci set firewall.allow_mdns_lan_broadcast.src='lan'
uci set firewall.allow_mdns_lan_broadcast.target='ACCEPT'
uci set firewall.allow_mdns_lan_broadcast.src_port='5353'
uci set firewall.allow_mdns_lan_broadcast.dest_port='5353'
# Key may not exist
uci del firewall.allow_mdns_lan_broadcast.dest_ip || true
uci add_list firewall.allow_mdns_lan_broadcast.dest_ip='224.0.0.251'
#uci add_list firewall.allow_mdns_lan_broadcast.dest_ip='ff02::fb'
uci commit firewall

# MDNS broadcast for iot
uci set firewall.allow_mdns_iot_broadcast=rule
uci set firewall.allow_mdns_iot_broadcast.name='Allow-mDNS-iot-bridge-broadcast'
uci set firewall.allow_mdns_iot_broadcast.proto='udp'
uci set firewall.allow_mdns_iot_broadcast.src='iot'
uci set firewall.allow_mdns_iot_broadcast.target='ACCEPT'
uci set firewall.allow_mdns_iot_broadcast.src_port='5353'
uci set firewall.allow_mdns_iot_broadcast.dest_port='5353'
uci set firewall.allow_mdns_iot_broadcast.enabled='0'
# Key may not exist
uci del firewall.allow_mdns_iot_broadcast.dest_ip || true
uci add_list firewall.allow_mdns_iot_broadcast.dest_ip='224.0.0.251'
#uci add_list firewall.allow_mdns_iot_broadcast.dest_ip='ff02::fb'
uci commit firewall

# Allow DHCP and DNS from guest network
uci set firewall.allow_dhcp_guest=rule
uci set firewall.allow_dhcp_guest.name='Allow-GUEST-DHCP-DNS-ICMP'
uci del firewall.allow_dhcp_guest.proto || true
uci add_list firewall.allow_dhcp_guest.proto='tcp'
uci add_list firewall.allow_dhcp_guest.proto='udp'
uci add_list firewall.allow_dhcp_guest.proto='icmp'
uci set firewall.allow_dhcp_guest.target='ACCEPT'
uci set firewall.allow_dhcp_guest.src='guest'
uci set firewall.allow_dhcp_guest.dest_port='53 67 68'

# Allow DHCP and DNS from IOT network
uci set firewall.allow_dhcp_iot=rule
uci set firewall.allow_dhcp_iot.name='Allow-IOT-DHCP-DNS-ICMP'
uci del firewall.allow_dhcp_iot.proto || true
uci add_list firewall.allow_dhcp_iot.proto='tcp'
uci add_list firewall.allow_dhcp_iot.proto='udp'
uci add_list firewall.allow_dhcp_iot.proto='icmp'
uci set firewall.allow_dhcp_iot.target='ACCEPT'
uci set firewall.allow_dhcp_iot.src='iot'
uci set firewall.allow_dhcp_iot.dest_port='53 67 68'

# Allow WAN access to some IOT IPs
uci set firewall.iot_internet_access=rule
uci set firewall.iot_internet_access.src='iot'
uci set firewall.iot_internet_access.dest='wan'
uci set firewall.iot_internet_access.target='ACCEPT'
uci set firewall.iot_internet_access.name='Allow-IoT-Internet-Access'
uci set firewall.iot_internet_access.proto='all'
uci set firewall.iot_internet_access.enabled='0'

# Allow IOT access to some LAN IPs
uci set firewall.lan_iot_allowed_access=rule
uci set firewall.lan_iot_allowed_access.src='lan'
uci set firewall.lan_iot_allowed_access.dest='iot'
uci set firewall.lan_iot_allowed_access.target='ACCEPT'
uci set firewall.lan_iot_allowed_access.name='Allow-LAN-To-IoT-Access'
uci add_list firewall.lan_iot_allowed_access.proto='tcp'
uci add_list firewall.lan_iot_allowed_access.proto='udp'
uci add_list firewall.lan_iot_allowed_access.proto='icmp'
uci set firewall.lan_iot_allowed_access.enabled='0'

# Allow some LAN access to IoT IPs (this is inversion of the above)
# Example use-case would be a camera needing to write to Apple TV in LAN
uci set firewall.iot_lan_allowed_access=rule
uci set firewall.iot_lan_allowed_access.src='iot'
uci set firewall.iot_lan_allowed_access.dest='lan'
uci set firewall.iot_lan_allowed_access.target='ACCEPT'
uci set firewall.iot_lan_allowed_access.name='Allow-IoT-To-LAN-Access'
uci add_list firewall.iot_lan_allowed_access.proto='tcp'
uci add_list firewall.iot_lan_allowed_access.proto='udp'
uci add_list firewall.iot_lan_allowed_access.proto='icmp'
uci set firewall.iot_lan_allowed_access.enabled='0'


if [ -n '${IOT_MDNS_ALLOWED_IPS_TEMPLATE}' ]; then
  # Use TEMP_VARIABLE to work properly with first-pass templating
  TEMP_VARIABLE='${IOT_MDNS_ALLOWED_IPS_TEMPLATE}'
  # Key may not exist
  uci del firewall.allow_mdns_iot_broadcast.src_ip || true
  # Enable the rule
  uci del firewall.allow_mdns_iot_broadcast.enabled || true

  # No double quotes to allow iteration over whitespace
  for ip in ${TEMP_VARIABLE} ; do
    uci add_list "firewall.allow_mdns_iot_broadcast.src_ip=${ip}"
  done
  uci commit firewall
fi

if [ -n '${IOT_INTERNET_ALLOWED_IPS_TEMPLATE}' ]; then
  # Use TEMP_VARIABLE to work properly with first-pass templating
  TEMP_VARIABLE='${IOT_INTERNET_ALLOWED_IPS_TEMPLATE}'
  # Key may not exist
  uci del firewall.iot_internet_access.src_ip || true
  # Enable the rule
  uci del firewall.iot_internet_access.enabled || true

  # No double quotes to allow iteration over whitespace
  for ip in ${TEMP_VARIABLE} ; do
    uci add_list "firewall.iot_internet_access.src_ip=${ip}"
  done
  uci commit firewall
fi

if [ -n '${LAN_IOT_ALLOWED_IPS_TEMPLATE}' ]; then
  # Use TEMP_VARIABLE to work properly with first-pass templating
  TEMP_VARIABLE='${LAN_IOT_ALLOWED_IPS_TEMPLATE}'
  # Key may not exist
  uci del firewall.lan_iot_allowed_access.src_ip || true
  uci del firewall.iot_lan_allowed_access.dest_ip || true
  # Enable the rule
  uci del firewall.lan_iot_allowed_access.enabled || true
  uci del firewall.iot_lan_allowed_access.enabled || true

  # No double quotes to allow iteration over whitespace
  for ip in ${TEMP_VARIABLE} ; do
    uci add_list "firewall.lan_iot_allowed_access.src_ip=${ip}"
    uci add_list "firewall.iot_lan_allowed_access.dest_ip=${ip}"
  done
  uci commit firewall
fi


${FIREWALL_CUSTOM_RULES_TEMPLATE}


# Use restart instead of reload as fw4 may not yet be started?
# This causes the init script to fail when run initially on boot
/etc/init.d/firewall restart
