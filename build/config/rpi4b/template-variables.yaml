# Values that can be considered "secrets", provided in this file are exemplary
# secret-variables.yaml file with appropriate overrides should be created
#
# Take a look at common/template-variables.yaml
# to see some docs and examples

hostname: mainrouter

#security:
#  root_password: ...
#
#  ssh:
#    keys:
#      - ...
#
#letsencrypt:
#  enabled: true
#  domain: ...
#  acme:
#    email: ...
#    route53:
#      access_key_id: ...
#      access_key_secret: ...

network:
  globals:
    packet_steering: true
    # ula_prefix: ...

bridge_config:
  # We have one built-in ethernet
  # and two adapters connected
  # thus we get
  # eth0 for all the stuff (via tagged VLANs)
  # eth1 for WAN
  ports:
    - eth0
  # TODO: do we need this?
  # This bridge won't ever be empty
  empty: true

networks:
  lan:
    proto: static
    device: br-lan
    ipaddr: 192.168.1.1
    gateway: 192.168.240.99
    netmask: 255.255.255.0
    vlan:
      id: 99
      ports:
        - eth0:t*
    broadcast_mdns: true
    dhcp:
      start: 100
      limit: 150
      leasetime: 12h

  wan:
    # Magic values set on the ISP router
    # to allow for the DMZ based bridge
    # via https://openwrt.org/docs/guide-user/network/wan/dmz-based-bridge-mode
    proto: static
    device: eth1
    ipaddr: 192.168.240.99
    gateway: 192.168.240.1
    netmask: 255.255.255.0
    collect_dns_statistics: false
    dhcp:
      start: 100
      limit: 150
      leasetime: 12h
      ra_flags:
        - "none"
  guest:
    proto: static
    device: br-lan
    ipaddr: 192.168.2.1
    gateway: 192.168.240.99
    netmask: 255.255.255.0
    vlan:
      id: 20
      ports:
        - eth0:t
    type: bridge
    dhcp:
      start: 100
      limit: 150
      leasetime: 12h
    firewall:
      zone:
        input: REJECT
        output: ACCEPT
        forward: REJECT
      forwarding:
        - wan

  iot:
    proto: static
    device: br-lan
    ipaddr: 192.168.3.1
    gateway: 192.168.240.99
    netmask: 255.255.255.0
    vlan:
      id: 30
      ports:
        - eth0:t
    type: bridge
    # TODO: this is only added so home-assistant, IoT devices and homekit-hub can see each other
    broadcast_mdns: true
    dhcp:
      start: 100
      limit: 150
      leasetime: 12h
    firewall:
      zone:
        input: REJECT
        output: ACCEPT
        forward: REJECT

security:
  ssh:
    interface: lan

vpns:
  vpn_main:
    interface:
      proto: wireguard
      force_link: true
      # private_key: secret
      # listen_port: secret
      addresses:
        - 192.168.69.1/24
    firewall:
      add_rule_for_wan_access: true
      zone:
        input: REJECT
        output: ACCEPT
        forward: REJECT
      forwarding:
        - wan
    clients: {}

  vpn_guest:
    interface:
      proto: wireguard
      force_link: true
      # private_key: secret
      # listen_port: secret
      addresses:
        - 192.168.70.1/24
    firewall:
      add_rule_for_wan_access: true
      zone:
        input: REJECT
        output: ACCEPT
        forward: REJECT
        #forwarding:
        #- wan
    clients: {}

  vpn_family:
    interface:
      proto: wireguard
      force_link: true
      # private_key: secret
      # listen_port: secret
      addresses:
        - 192.168.71.1/24
    firewall:
      add_rule_for_wan_access: true
      zone:
        input: REJECT
        output: ACCEPT
        forward: REJECT
      forwarding:
        - wan
    clients: {}

wireless:
  radios:
    radio0:
      country: PL
      enabled: false
      cell_density: 0
  networks: {}
#   SomeNetworkRecovery:
#     device: radio0
#     mode: ap
#     encryption: sae-mixed
#     key: example_key
#     isolate: true
#     network: lan
#     enabled: false

dhcp:
  # This will be overriden by https-dns-proxy anyway
  default_dns_server: 1.1.1.1
  hosts:
    # MAC addresses have to be overriden in secret-variables.yaml
    homeserver-one:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.3.10"
      dns: true

    homeserver-two:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.3.11"
      dns: true

    homeserver-three:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.3.12"
      dns: true

    # a worker node
    homeserver-four:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.3.14"
      dns: true

    homekit-hub:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.1.10"
      dns: true

    aprouter:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.1.3"
      dns: true

    switch:
      # mac: 'XX:XX:XX:XX:XX:XX'
      ip: "192.168.1.4"
      dns: true

  domains: {}
  # example.com:
  #   ip: '192.168.1.23'

  # https://openwrt.org/docs/guide-user/base-system/dhcp_configuration#a_and_aaaa_rr
  addresses:
    homeserver: &homeserver_nodes
      - 192.168.3.10
      - 192.168.3.11
      - 192.168.3.12
      - 192.168.3.14

adblock:
  sources:
    - disconnect
    - reg_pl1
    - reg_pl2
    - smarttv_tracking
    - spam404

firewall:
  rules:
    # TODO: Should below rules be part of the networks setup?
    allow_dhcp_dns_icmp_guest:
      proto:
        - tcp
        - udp
        - icmp
      target: ACCEPT
      src: guest
      dest_port:
        - 53
        - 67
        - 68

    allow_dhcp_dns_icmp_iot:
      proto:
        - tcp
        - udp
        - icmp
      target: ACCEPT
      src: iot
      dest_port:
        - 53
        - 67
        - 68

    allow_dhcp_dns_icmp_vpn_main:
      proto:
        - tcp
        - udp
        - icmp
      target: ACCEPT
      src: vpn_main
      dest_port:
        - 53
        - 67
        - 68

    allow_dhcp_dns_icmp_vpn_guest:
      proto:
        - tcp
        - udp
        - icmp
      target: ACCEPT
      src: vpn_guest
      dest_port:
        - 53
        - 67
        - 68

    allow_dhcp_dns_icmp_vpn_family:
      proto:
        - tcp
        - udp
        - icmp
      target: ACCEPT
      src: vpn_family
      dest_port:
        - 53
        - 67
        - 68

    allow_lan_mdns_broadcast:
      # TODO: should this be limited to the HomeKit hub only?
      # do we care about other devices broadcasting mDNS?
      target: ACCEPT
      proto:
        - udp
      src: lan
      src_port:
        - 5353
      dest_port:
        - 5353
      dest_ip:
        - 224.0.0.251
        #- ff02::fb

    allow_iot_mdns_broadcast:
      target: ACCEPT
      proto:
        - udp
      src: iot
      # For the home-assistant to work properly
      src_ip: *homeserver_nodes
      src_port:
        - 5353
      dest_port:
        - 5353
      dest_ip:
        - 224.0.0.251
        #- ff02::fb

    allow_iot_internet_access:
      target: ACCEPT
      src: iot
      dest: wan
      src_ip:
        # *homeserver_nodes
        - 192.168.3.10
        - 192.168.3.11
        - 192.168.3.12
        - 192.168.3.14
        # few smart devices that need it
        # as they can't be controlled via LAN only
        - 192.168.3.21
        - 192.168.3.25

    # The two below rules are for communication between HomeKit hub
    # and the IoT devices
    allow_lan_to_iot_homekit:
      target: ACCEPT
      src: lan
      src_ip:
        # HomeKit hub
        - 192.168.1.10
      dest: iot
      proto:
        - tcp
        - udp
        - icmp

    allow_iot_to_lan_homekit:
      target: ACCEPT
      src: iot
      dest: lan
      dest_ip:
        # HomeKit hub
        - 192.168.1.10
      proto:
        - tcp
        - udp
        - icmp

    # TODO: move the servers to a separate VLAN
    allow_lan_to_homeserver:
      target: ACCEPT
      src: lan
      dest: iot
      dest_ip: *homeserver_nodes

    allow_guest_to_homeserver_http:
      target: ACCEPT
      src: guest
      dest: iot
      dest_ip: *homeserver_nodes
      dest_port:
        - 80
        - 443
      proto:
        - tcp

    allow_vpn_main_to_homeserver:
      target: ACCEPT
      src: vpn_main
      dest: iot
      proto:
        - tcp
        - udp
        - icmp
      dest_ip: *homeserver_nodes
      dest_port:
        - 22
        - 80
        - 443
        # For K8S api
        - 6443

    allow_vpn_guest_to_homeserver:
      target: ACCEPT
      src: vpn_guest
      dest: iot
      proto:
        - tcp
      dest_ip: *homeserver_nodes
      dest_port:
        - 80
        - 443

    allow_vpn_family_to_homeserver:
      target: ACCEPT
      src: vpn_family
      dest: iot
      proto:
        - tcp
      dest_ip: *homeserver_nodes
      dest_port:
        - 80
        - 443

    allow_vpn_main_to_devserver:
      target: ACCEPT
      src: vpn_main
      dest: lan
      proto:
        - tcp
        - udp
        - icmp
      dest_ip:
        - 192.168.1.14
      dest_port:
        - 22

    allow_vpn_guest_to_devserver_minecraft:
      target: ACCEPT
      src: vpn_guest
      dest: lan
      proto:
        - tcp
        - udp
      dest_ip:
        - 192.168.1.14
      dest_port:
        - 25565

    allow_lan_server_node_exporter_scrape_from_iot:
      target: ACCEPT
      src: iot
      src_ip: *homeserver_nodes
      dest: lan
      dest_ip:
        # desktop and devserver
        - 192.168.1.14
        - 192.168.1.22
      dest_port:
        - 9100
      proto:
        - tcp

    allow_mainrouter_node_exporter_scrape_from_iot:
      target: ACCEPT
      src: iot
      src_ip: *homeserver_nodes
      dest_port:
        - 9100
      proto:
        - tcp

# This is a netboot server redirect for tftp
netboot:
  enabled: true
  # One of the homeserver nodes
  ip: 192.168.3.10
  dest_port: 32169
  src: lan
  dest: iot

statistics:
  ping:
    enabled: true
    interval: 60
    hosts:
      - 127.0.0.1
      # TODO: change it when AP router is added to a separate management VLAN
      - 192.168.1.3
      - 1.1.1.1
      - 8.8.8.8
  dns:
    enabled: true

node_exporter:
  # For the homeserver nodes
  listen_interface: iot
